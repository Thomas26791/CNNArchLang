package de.monticore.lang.monticar;

grammar CNNArch extends de.monticore.lang.math.Math {

    CNNArchCompilationUnit = Architecture;

    symbol scope Architecture = "architecture"
                                name:Name& "{"
                                defs:ArchDeclaration*
                                body:ArchBody "}";

    interface ArchDeclaration;
    interface ArchitectureElement;
    interface Variable;

    symbol IODeclaration implements ArchDeclaration = "def"
                                                      (in:"input" | out:"output")
                                                      type:ArchType
                                                      Name&
                                                      (ArrayDeclaration)?;

    ArchType implements Type = (ElementType ("^" "{" (IOVariable || ",")+ "}")?)?;

    symbol IOVariable implements Variable = Name&;

    symbol Constant implements Variable = "def" Name& "=" rhs:ArchRhs;

    symbol scope MethodDeclaration implements ArchDeclaration = "def"
                                                                Name& "("
                                                                parameters:(Parameter || ",")* ")" "{"
                                                                body:ArchBody "}";

    symbol Parameter implements Variable = Name& ("=" default:ArchRhs)?;

    ArchBody = elements:(ArchitectureElement || "->")*;

    IOLayer implements ArchitectureElement = Name& ("[" index:ArchExpression "]")?;

    MethodLayer implements ArchitectureElement = Name& "(" arguments:(Argument || ",")* ")";

    Argument = Name "=" rhs:ArchRhs;

    ArchRhs = (expression:ArchExpression | sequence:ArchValueSequence);

    ArchValueSequence = "[" parallelValues:(SerialValues || "|")* "]";

    SerialValues = (ArchExpression || "->")+;

    ArchValueRange extends ArchValueSequence = "[" start:ArchExpression
                                               (serial:"->" | parallel:"|")
                                               (":" step:ArchExpression)?
                                               ":" end:ArchExpression "]";

    ParallelLayer implements ArchitectureElement = "(" groups:(ArchBody || "|")+ ")";

    ArrayAccessLayer implements ArchitectureElement = "[" index:ArchExpression "]";

    ArchExpression = (arithmeticExpression:MathArithmeticExpression
                   | booleanExpression:MathBooleanExpression
                   | tupleExpression:TupleExpression);

    TupleExpression implements MathExpression = "(" expressions:MathArithmeticExpression "," expressions:(MathArithmeticExpression || ",")* ")";

}