package de.monticore.lang.monticar;

grammar CNNArch extends de.monticore.lang.math.Math {

    symbol scope CNNArchCompilationUnit = "architecture"
                                          name:Name&
                                          ( "(" (ArchitectureParameter || ",")* ")" )? "{"
                                          ioDeclarations:IODeclaration*
                                          Architecture
                                          "}";

    Architecture = NEWLINETOKEN* methodDeclaration:MethodDeclaration* NEWLINETOKEN*
                   body:ArchBody NEWLINETOKEN*;

    interface ArchitectureElement;
    interface Variable;
    ast Variable = method String getName(){};

    IODeclaration = NEWLINETOKEN* "def"
                   (in:"input" | out:"output")
                   type:ArchType
                   Name&
                   (ArrayDeclaration)?;

    ArchType = ElementType "^" Shape;

    Shape = "{" dimensions:(ArchSimpleExpression || ",")* "}";

    ArchitectureParameter implements Variable = NEWLINETOKEN* Name& ("=" default:ArchSimpleExpression)? NEWLINETOKEN*;

    MethodDeclaration = NEWLINETOKEN* "def"
                        Name& "("
                        parameters:(MethodParameter || ",")* ")" "{" NEWLINETOKEN*
                        body:ArchBody NEWLINETOKEN* "}";

    MethodParameter implements Variable = NEWLINETOKEN* Name& ("=" default:ArchSimpleExpression)? NEWLINETOKEN*;

    scope ArchBody = elements:(ArchitectureElement || "->")*;

    IOLayer implements ArchitectureElement = NEWLINETOKEN* Name& ("[" index:ArchSimpleExpression "]")?;

    MethodLayer implements ArchitectureElement = NEWLINETOKEN* Name& "(" arguments:(ArchArgument || ",")* ")";

    interface ArchArgument;
    ast ArchArgument = method String getName(){}
                       method ASTArchExpression getRhs(){};

    ArchParameterArgument implements ArchArgument = NEWLINETOKEN* Name "=" rhs:ArchExpression NEWLINETOKEN*;

    ArchSpecialArgument implements ArchArgument = NEWLINETOKEN* (serial:"->" | parallel:"|" | conditional:"?") "="
                                                  rhs:ArchExpression NEWLINETOKEN*;
    ast ArchSpecialArgument = method public String getName(){return "";};

    ParallelLayer implements ArchitectureElement = NEWLINETOKEN* "(" NEWLINETOKEN* groups:ArchBody NEWLINETOKEN* "|" NEWLINETOKEN* groups:(ArchBody || "|")+ NEWLINETOKEN* ")";

    ArrayAccessLayer implements ArchitectureElement = NEWLINETOKEN* "[" index:ArchSimpleExpression "]";


    ArchExpression = (expression:ArchSimpleExpression | sequence:ArchValueSequence);

    interface ArchValueSequence;

    ArchParallelSequence implements ArchValueSequence = "[" parallelValues:(ArchSerialSequence || "|")+ "]";

    ArchSerialSequence = serialValues:(ArchSimpleExpression || "->")*;

    ArchValueRange implements ArchValueSequence = "[" start:ArchSimpleExpression
                                                  (serial:"->" | parallel:"|")
                                                  ".."
                                                  (serial2:"->" | parallel2:"|")
                                                  end:ArchSimpleExpression "]";


    ArchSimpleExpression = (arithmeticExpression:MathArithmeticExpression
                         | booleanExpression:MathBooleanExpression
                         | tupleExpression:TupleExpression
                         | string:StringLiteral);

    TupleExpression = "(" expressions:MathExpression "," expressions:(MathExpression || ",")* ")";

    token NEWLINETOKEN =
             ('\r' '\n' |
             '\r' |
             '\n' ):;
}