package de.monticore.lang.monticar;

grammar CNNArch extends de.monticore.lang.math.Math {

    token NEWLINETOKEN =
                 ('\r' '\n' |
                 '\r' |
                 '\n' ):;

    /* =================================*/
    /* ========== PRODUCTIONS ==========*/
    /* =================================*/

    /* ========== Declarations =========*/

    /**
        The complete file.
        Use nonterminal Architecture for embedding in another language (e.g. EmbeddedMontiArc)
    */
    symbol scope CNNArchCompilationUnit = "architecture"
                                          name:Name
                                          ( "(" (ArchitectureParameter || ",")* ")" )? "{"
                                          ioDeclarations:IODeclaration*
                                          Architecture
                                          "}";

    LayerDeclaration = NEWLINETOKEN* "def"
                       Name "("
                       parameters:(LayerParameter || ",")* ")" "{" NEWLINETOKEN*
                       body:ArchBody NEWLINETOKEN* "}";

    IODeclaration = NEWLINETOKEN* "def"
                    (in:"input" | out:"output")
                    type:ArchType
                    Name
                    (ArrayDeclaration)?;


    /* ============== Type =============*/

    /**
         Similar to EmbeddedMontiArc port types.
         ArchType and Shape are not used if the Architecture is integrated into EmbeddedMontiArc
    */
    ArchType = ElementType "^" Shape;

    Shape = "{" dimensions:(ArchSimpleExpression || ",")* "}";


    /* ========= Architecture  =========*/

    /**
        Defines the architecture of the neural network.
        This NT is used for integration in EmbeddedMontiArc.
        @attribute methodDeclaration*
                 A list of new layers which can be used in the architecture.
        @attribute body
                 The architecture of the neural network.
    */
    Architecture = NEWLINETOKEN* methodDeclaration:LayerDeclaration* NEWLINETOKEN*
                   body:ArchBody NEWLINETOKEN*;

    scope ArchBody = elements:(ArchitectureElement || "->")*;

    interface ArchitectureElement;

    IOElement implements ArchitectureElement = NEWLINETOKEN* Name ("[" index:ArchSimpleExpression "]")?;

    Layer implements ArchitectureElement = NEWLINETOKEN* Name "(" arguments:(ArchArgument || ",")* ")";

    ParallelBlock implements ArchitectureElement = NEWLINETOKEN* "(" NEWLINETOKEN*
                                                   groups:ArchBody NEWLINETOKEN* "|" NEWLINETOKEN*
                                                   groups:(ArchBody || "|")+ NEWLINETOKEN* ")";

    ArrayAccessLayer implements ArchitectureElement = NEWLINETOKEN* "[" index:ArchSimpleExpression "]";


    /* ====== Variables/Arguments ======*/

    interface Variable;

    ArchitectureParameter implements Variable = NEWLINETOKEN* Name ("=" default:ArchSimpleExpression)? NEWLINETOKEN*;

    LayerParameter implements Variable = NEWLINETOKEN* Name ("=" default:ArchSimpleExpression)? NEWLINETOKEN*;

    interface ArchArgument;

    ArchParameterArgument implements ArchArgument = NEWLINETOKEN* Name "=" rhs:ArchExpression NEWLINETOKEN*;

    ArchSpecialArgument implements ArchArgument = NEWLINETOKEN*
                                                  (serial:"->" | parallel:"|" | conditional:"?") "="
                                                  rhs:ArchExpression NEWLINETOKEN*;


    /* ======= Value Expressions =======*/

    /**
        Expression used for method arguments.
    */
    ArchExpression = (expression:ArchSimpleExpression | sequence:ArchValueSequence);

    interface ArchValueSequence;

    ArchParallelSequence implements ArchValueSequence = "[" parallelValues:(ArchSerialSequence || "|")+ "]";

    ArchSerialSequence = serialValues:(ArchSimpleExpression || "->")*;

    ArchValueRange implements ArchValueSequence = "[" start:ArchSimpleExpression
                                                  (serial:"->" | parallel:"|")
                                                  ".."
                                                  (serial2:"->" | parallel2:"|")
                                                  end:ArchSimpleExpression "]";
    /**
        Expressions for variable values.
    */
    ArchSimpleExpression = (arithmeticExpression:MathArithmeticExpression
                         | booleanExpression:MathBooleanExpression
                         | tupleExpression:TupleExpression
                         | string:StringLiteral);

    TupleExpression = "(" expressions:MathArithmeticExpression "," expressions:(MathArithmeticExpression || ",")* ")";


    /* =================================*/
    /* ============ ASTRULES ===========*/
    /* =================================*/
    ast Variable = method String getName(){};
    ast ArchSpecialArgument = method public String getName(){return "";}; //Override is necessary
    ast ArchArgument = method String getName(){}
                       method ASTArchExpression getRhs(){};

}