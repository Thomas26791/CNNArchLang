package de.monticore.lang.monticar;

grammar CNNArch extends de.monticore.lang.math.Math {

    CNNArchCompilationUnit = Architecture;

    symbol scope Architecture = "architecture"
                                name:Name& "("
                                (ArchitectureParameter || ",")* ")" "{"
                                declarations:ArchDeclaration*
                                body:ArchBody "}";

    interface ArchDeclaration;
    interface ArchitectureElement;
    interface Variable;
    ast Variable = method String getName(){};

    IODeclaration implements ArchDeclaration = "def"
                                               (in:"input" | out:"output")
                                               type:ArchType
                                               Name&
                                               (ArrayDeclaration)?;

    ArchType implements Type = ElementType "^" Shape;

    Shape = "{" dimensions:(DimensionArgument || ",")* "}";

    DimensionArgument = (name:"H" ":" height:ArchSimpleExpression
                      |  name:"W" ":" width:ArchSimpleExpression
                      |  name:"C" ":" channels:ArchSimpleExpression);

    ArchitectureParameter implements Variable = Name& ("=" default:ArchSimpleExpression)?;

    MethodDeclaration implements ArchDeclaration = "def"
                                                   Name& "("
                                                   parameters:(MethodParameter || ",")* ")" "{"
                                                   body:ArchBody "}";

    MethodParameter implements Variable = Name& ("=" default:ArchSimpleExpression)?;

    scope ArchBody = elements:(ArchitectureElement || "->")*;

    IOLayer implements ArchitectureElement = Name& ("[" index:ArchSimpleExpression "]")?;

    MethodLayer implements ArchitectureElement = Name& "(" arguments:(ArchArgument || ",")* ")";

    interface ArchArgument;
    ast ArchArgument = method String getName(){}
                       method ASTArchExpression getRhs(){};

    ArchParameterArgument implements ArchArgument = Name "=" rhs:ArchExpression;

    ArchSpecialArgument implements ArchArgument = (serial:"->" | parallel:"|" | conditional:"?") "="
                                                  rhs:ArchExpression;
    ast ArchSpecialArgument = method public String getName(){return "";};

    ParallelLayer implements ArchitectureElement = "(" groups:ArchBody "|" groups:(ArchBody || "|")+ ")";

    ArrayAccessLayer implements ArchitectureElement = "[" index:ArchSimpleExpression "]";


    ArchExpression = (expression:ArchSimpleExpression | sequence:ArchValueSequence);

    interface ArchValueSequence;

    ArchParallelSequence implements ArchValueSequence = "[" parallelValues:(ArchSerialSequence || "|")* "]";

    ArchSerialSequence = serialValues:(ArchSimpleExpression || "->")+;

    ArchValueRange implements ArchValueSequence = start:ArchSimpleExpression
                                                  (serial:"->" | parallel:"|")
                                                  ".."
                                                  (serial2:"->" | parallel2:"|")
                                                  end:ArchSimpleExpression;


    ArchSimpleExpression = (arithmeticExpression:MathArithmeticExpression
                         | booleanExpression:MathBooleanExpression
                         | tupleExpression:TupleExpression
                         | string:StringLiteral);

    TupleExpression implements MathExpression = "(" expressions:MathExpression "," expressions:(MathExpression || ",")* ")";

}