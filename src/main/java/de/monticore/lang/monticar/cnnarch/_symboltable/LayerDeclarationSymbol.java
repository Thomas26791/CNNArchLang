/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.ScopeSpanningSymbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.lang.monticar.cnnarch.predefined.AllPredefinedVariables;
import de.monticore.symboltable.CommonScopeSpanningSymbol;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class LayerDeclarationSymbol extends CommonScopeSpanningSymbol {

    public static final LayerDeclarationKind KIND = new LayerDeclarationKind();

    private List<VariableSymbol> parameters;
    private CompositeElementSymbol body;


    protected LayerDeclarationSymbol(String name) {
        super(name, KIND);
    }

    @Override
    protected LayerDeclarationScope createSpannedScope() {
        return new LayerDeclarationScope();
    }

    @Override
    public LayerDeclarationScope getSpannedScope() {
        return (LayerDeclarationScope) super.getSpannedScope();
    }

    public List<VariableSymbol> getParameters() {
        return parameters;
    }

    protected void setParameters(List<VariableSymbol> parameters) {
        this.parameters = parameters;
        if (!getParameter(AllPredefinedVariables.CONDITIONAL_ARG_NAME).isPresent()){
            VariableSymbol ifParam = AllPredefinedVariables.createConditionalParameter();
            this.parameters.add(ifParam);
            ifParam.putInScope(getSpannedScope());
        }
        if (!getParameter(AllPredefinedVariables.SERIAL_ARG_NAME).isPresent()){
            VariableSymbol forParam = AllPredefinedVariables.createSerialParameter();
            this.parameters.add(forParam);
            forParam.putInScope(getSpannedScope());
        }
        if (!getParameter(AllPredefinedVariables.PARALLEL_ARG_NAME).isPresent()){
            VariableSymbol forParam = AllPredefinedVariables.createParallelParameter();
            this.parameters.add(forParam);
            forParam.putInScope(getSpannedScope());
        }
    }

    public CompositeElementSymbol getBody() {
        return body;
    }

    protected void setBody(CompositeElementSymbol body) {
        this.body = body;
    }

    public boolean isPredefined() {
        //Override by PredefinedLayerDeclaration
        return false;
    }

    public Optional<VariableSymbol> getParameter(String name) {
        Optional<VariableSymbol> res = Optional.empty();
        for (VariableSymbol parameter : getParameters()){
            if (parameter.getName().equals(name)){
                res = Optional.of(parameter);
            }
        }
        return res;
    }


    public ArchitectureElementSymbol call(LayerSymbol layer) throws ArchResolveException{
        checkForSequence(layer.getArguments());

        if (isPredefined()){
            return layer;
        }
        else {
            reset();
            set(layer.getArguments());

            CompositeElementSymbol copy = getBody().preResolveDeepCopy();
            copy.putInScope(getSpannedScope());
            copy.resolveOrError();
            getSpannedScope().remove(copy);
            getSpannedScope().removeSubScope(copy.getSpannedScope());

            reset();
            return copy;
        }
    }

    private void reset(){
        for (VariableSymbol param : getParameters()){
            param.reset();
        }
    }

    private void set(List<ArgumentSymbol> arguments){
        for (ArgumentSymbol arg : arguments){
            arg.set();
        }
    }

    private void checkForSequence(List<ArgumentSymbol> arguments){
        boolean valid = true;
        for (ArgumentSymbol arg : arguments){
            if (arg.getRhs() instanceof  ArchAbstractSequenceExpression){
                valid = false;
            }
        }
        if (!valid){
            throw new IllegalArgumentException("Arguments with sequence expressions have to be resolved first before calling the layer method.");
        }
    }

    public LayerDeclarationSymbol deepCopy() {
        LayerDeclarationSymbol copy = new LayerDeclarationSymbol(getName());
        if (getAstNode().isPresent()){
            copy.setAstNode(getAstNode().get());
        }

        List<VariableSymbol> parameterCopies = new ArrayList<>(getParameters().size());
        for (VariableSymbol parameter : getParameters()){
            VariableSymbol parameterCopy = parameter.deepCopy();
            parameterCopies.add(parameterCopy);
            parameterCopy.putInScope(copy.getSpannedScope());
        }
        copy.setParameters(parameterCopies);
        copy.setBody(getBody().preResolveDeepCopy());
        copy.getBody().putInScope(copy.getSpannedScope());
        return copy;
    }


    /*public static class Builder{
        private List<VariableSymbol> parameters = new ArrayList<>();
        private CompositeElementSymbol body;
        private String name = "";

        public Builder parameters(List<VariableSymbol> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(VariableSymbol... parameters) {
            this.parameters = new ArrayList<>(Arrays.asList(parameters));
            return this;
        }

        public Builder body(CompositeElementSymbol body) {
            this.body = body;
            return this;
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public LayerDeclarationSymbol build(){
            if (name == null || name.equals("")){
                throw new IllegalStateException("Missing or empty name for LayerDeclarationSymbol");
            }
            LayerDeclarationSymbol sym = new LayerDeclarationSymbol(name);
            sym.setBody(body);
            if (body != null){
                body.putInScope(sym.getSpannedScope());
            }
            for (VariableSymbol param : parameters){
                param.putInScope(sym.getSpannedScope());
            }
            sym.setParameters(parameters);
            return sym;
        }
    }*/
}
