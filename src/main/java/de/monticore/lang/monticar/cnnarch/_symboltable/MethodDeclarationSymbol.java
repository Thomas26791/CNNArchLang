/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.ScopeSpanningSymbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.symboltable.CommonScopeSpanningSymbol;
import de.monticore.symboltable.SymbolKind;
import de.se_rwth.commons.logging.Log;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class MethodDeclarationSymbol extends CommonScopeSpanningSymbol {

    public static final MethodDeclarationKind KIND = new MethodDeclarationKind();

    private List<VariableSymbol> parameters;
    private CompositeLayerSymbol body;
    private boolean isPredefined;

    protected MethodDeclarationSymbol(String name) {
        super(name, KIND);
    }

    public List<VariableSymbol> getParameters() {
        return parameters;
    }

    protected void setParameters(List<VariableSymbol> parameters) {
        this.parameters = parameters;
    }

    public CompositeLayerSymbol getBody() {
        return body;
    }

    protected void setBody(CompositeLayerSymbol body) {
        this.body = body;
    }

    public boolean isPredefined() {
        return isPredefined;
    }

    protected void setPredefined(boolean predefined) {
        isPredefined = predefined;
    }

    public Optional<LayerSymbol> call(MethodLayerSymbol layer) {
        if (isPredefined()){
            return Optional.of(layer);
        }
        //todo
        if (layer.isCallable()){
            int parallelLength = layer.getParallelLength().get();
            int serialLength = layer.getSerialLength().get();

            List<List<ArgumentSymbol>> arguments = new ArrayList<>(parallelLength);


            return null;
        }
        else {
            return Optional.empty();
        }
    }



    //todo

    public static class Builder{
        private List<VariableSymbol> parameters = new ArrayList<>();
        private CompositeLayerSymbol body;
        private String name = "";
        private boolean predefined = false;

        public Builder parameters(List<VariableSymbol> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(VariableSymbol... parameters) {
            this.parameters = Arrays.asList(parameters);
            return this;
        }

        public Builder body(CompositeLayerSymbol body) {
            this.body = body;
            return this;
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder predefined(boolean isPredefined){
            predefined = isPredefined;
            return this;
        }

        public MethodDeclarationSymbol build(){
            if (name == null || name.equals("")){
                throw new IllegalStateException("Missing name for MethodDeclarationSymbol");
            }
            MethodDeclarationSymbol sym = new MethodDeclarationSymbol(name);
            sym.setBody(body);
            sym.setParameters(parameters);
            sym.setPredefined(predefined);
            return sym;
        }
    }
}
