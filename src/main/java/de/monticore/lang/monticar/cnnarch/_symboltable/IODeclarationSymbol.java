/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.Symbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.symboltable.CommonSymbol;
import de.monticore.symboltable.Scope;
import de.monticore.symboltable.Symbol;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

public class IODeclarationSymbol extends CommonSymbol {

    public static final IODeclarationKind KIND = new IODeclarationKind();

    private ArchTypeSymbol type;
    private boolean input; //true->input, false->output
    private int arrayLength = 1;
    private ArchitectureSymbol architecture = null; // set by ArchitectureSymbol

    protected IODeclarationSymbol(String name) {
        super(name, KIND);
    }

    public ArchTypeSymbol getType() {
        return type;
    }

    protected void setType(ArchTypeSymbol type) {
        this.type = type;
    }

    public List<IOSymbol> getConnectedElements() {
        if (getArchitecture() == null){
            return new ArrayList<>();
        }
        else {
            List<IOSymbol> completeList;
            if (input) {
                completeList = getArchitecture().getInputs();
            } else {
                completeList = getArchitecture().getOutputs();
            }
            return completeList.stream()
                    .filter(e -> e.getName().equals(getName()))
                    .collect(Collectors.toList());
        }
    }

    public boolean isOutput(){
        return !input;
    }

    public boolean isInput() {
        return input;
    }

    protected void setInput(boolean input) {
        this.input = input;
    }

    public int getArrayLength() {
        return arrayLength;
    }

    protected void setArrayLength(int arrayLength) {
        this.arrayLength = arrayLength;
    }

    public ArchitectureSymbol getArchitecture() {
        return architecture;
    }

    public void setArchitecture(ArchitectureSymbol architecture) {
        this.architecture = architecture;
    }

    public void putInScope(Scope scope){
        Collection<Symbol> symbolsInScope = scope.getLocalSymbols().get(getName());
        if (symbolsInScope == null || !symbolsInScope.contains(this)) {
            scope.getAsMutableScope().add(this);
            getType().putInScope(scope);
        }
    }

    public IODeclarationSymbol preResolveDeepCopy(){
        IODeclarationSymbol copy = new IODeclarationSymbol(getName());
        if (getAstNode().isPresent()){
            copy.setAstNode(getAstNode().get());
        }

        copy.setInput(isInput());
        copy.setArrayLength(getArrayLength());
        copy.setType(getType().preResolveDeepCopy());

        return copy;
    }

    public static class Builder{
        private ArchTypeSymbol type;
        private boolean input; //true->input, false->output
        private int arrayLength = 0;
        private String name;

        public Builder type(ArchTypeSymbol type){
            this.type = type;
            return this;
        }

        public Builder input(boolean input){
            this.input = input;
            return this;
        }

        public Builder arrayLength(int arrayLength){
            this.arrayLength = arrayLength;
            return this;
        }

        public Builder name(String name){
            this.name = name;
            return this;
        }

        public IODeclarationSymbol build(){
            if (name == null || name.equals("")){
                throw new IllegalStateException("Missing or empty name for IO declaration");
            }
            IODeclarationSymbol sym = new IODeclarationSymbol(name);
            sym.setInput(input);
            sym.setArrayLength(arrayLength);
            sym.setType(type);
            return sym;
        }
    }
}
