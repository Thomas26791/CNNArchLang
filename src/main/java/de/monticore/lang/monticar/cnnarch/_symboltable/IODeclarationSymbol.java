/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.Symbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.lang.monticar.types2._ast.ASTElementType;
import de.monticore.symboltable.CommonSymbol;

public class IODeclarationSymbol extends CommonSymbol {

    public static final IODeclarationKind KIND = new IODeclarationKind();

    private ASTElementType type;
    private ShapeSymbol shape;
    private boolean input; //true->input, false->output
    private int arrayLength = 1;


    protected IODeclarationSymbol(String name) {
        super(name, KIND);
    }

    public ASTElementType getType() {
        return type;
    }

    protected void setType(ASTElementType type) {
        this.type = type;
    }

    public ShapeSymbol getShape() {
        return shape;
    }

    protected void setShape(ShapeSymbol shape) {
        this.shape = shape;
    }

    public boolean isOutput(){
        return !input;
    }

    public boolean isInput() {
        return input;
    }

    protected void setInput(boolean input) {
        this.input = input;
    }

    public int getArrayLength() {
        return arrayLength;
    }

    protected void setArrayLength(int arrayLength) {
        this.arrayLength = arrayLength;
    }



    public static class Builder{
        private ASTElementType type;
        private ShapeSymbol shape;
        private boolean input; //true->input, false->output
        private int arrayLength = 0;
        private String name;

        public Builder type(ASTElementType type){
            this.type = type;
            return this;
        }

        public Builder shape(ShapeSymbol shape){
            this.shape = shape;
            return this;
        }

        public Builder input(boolean input){
            this.input = input;
            return this;
        }

        public Builder arrayLength(int arrayLength){
            this.arrayLength = arrayLength;
            return this;
        }

        public Builder name(String name){
            this.name = name;
            return this;
        }

        public IODeclarationSymbol build(){
            if (name == null || name.equals("")){
                throw new IllegalStateException("Missing or empty name for IO declaration");
            }
            IODeclarationSymbol sym = new IODeclarationSymbol(name);
            sym.setType(type);
            sym.setInput(input);
            sym.setArrayLength(arrayLength);
            sym.setShape(shape);
            return sym;
        }
    }
}
