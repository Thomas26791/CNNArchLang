architecture ResNeXt50{
    def input image
    def output out

    image ->
    convolution(kernel=7, filters=64, stride=2)
    batchNorm()
    activation.relu()
    pooling.max(kernel=3, stride=2)
    
    group 1{
        group 1..32{
            convolution(kernel=1, filters=4)
            batchNorm()
            activation.relu()
            convolution(kernel=3, filters=4, stride=2)
            activation.relu()
            convolution(kernel=1, filters=256)
            batchNorm()
        } merge add()
    }
    group 2{
        convolution(kernel=1, filters=256, stride=2)
        batchNorm()
    }
    merge add()
    activation.relu()
    
    repeat 2{
        group 1{
            group 1..32{
                convolution(kernel=1, filters=4)
                batchNorm()
                activation.relu()
                convolution(kernel=3, filters=4)
                batchNorm()
                activation.relu()
                convolution(kernel=1, filters=256)
                batchNorm()
            } merge add()
        }
        group 2{}
        merge add()
        activation.relu()
    }
    
    group 1{
        group 1..32{
            convolution(kernel=1, filters=8)
            batchNorm()
            activation.relu()
            convolution(kernel=3, filters=8, stride=2)
            batchNorm()
            activation.relu()
            convolution(kernel=1, filters=512)
            batchNorm()
        } merge add()
    }
    group 2{
        convolution(kernel=1, filters=512, stride=2)
        batchNorm()
    }
    merge add()
    activation.relu()
    
    repeat 3{
        group 1{
            group 1..32{
                convolution(kernel=1, filters=8)
                batchNorm()
                activation.relu()
                convolution(kernel=3, filters=8)
                batchNorm()
                activation.relu()
                convolution(kernel=1, filters=512)
                batchNorm()
            } merge add()
        }
        group 2{}
        merge add()
        activation.relu()
    }
    
    group 1{
        group 1..32{
            convolution(kernel=1, filters=16)
            batchNorm()
            activation.relu()
            convolution(kernel=3, filters=16, stride=2)
            batchNorm()
            activation.relu()
            convolution(kernel=1, filters=1024)
            batchNorm()
        } merge add()
    }
    group 2{
        convolution(kernel=1, filters=1024, stride=2)
        batchNorm()
    }
    merge add()
    activation.relu()
    
    repeat 5{
        group 1{
            group 1..32{
                convolution(kernel=1, filters=16)
                batchNorm()
                activation.relu()
                convolution(kernel=3, filters=16)
                batchNorm()
                activation.relu()
                convolution(kernel=1, filters=1024)
                batchNorm()
            } merge add()
        }
        group 2{}
        merge add()
        activation.relu()
    }
    
    group 1{
        group 1..32{
            convolution(kernel=1, filters=32)
            batchNorm()
            activation.relu()
            convolution(kernel=3, filters=32, stride=2)
            batchNorm()
            activation.relu()
            convolution(kernel=1, filters=2048)
            batchNorm()
        } merge add()
    }
    group 2{
        convolution(kernel=1, filters=2048, stride=2)
        batchNorm()
    }
    merge add()
    activation.relu()
    
    repeat 2{
        group 1{
            group 1..32{
                convolution(kernel=1, filters=32)
                batchNorm()
                activation.relu()
                convolution(kernel=3, filters=32, stride=2)
                batchNorm()
                activation.relu()
                convolution(kernel=1, filters=2048)
                batchNorm()
            } merge add()
        }
        group 2{}
        merge add()
        activation.relu()
    }
    
    output{
        pooling.avg(global=true)
        fullyConnected()
        activation.softmax()
    } -> out
}
