architecture MissingArgument(img_height=224, img_width=224, img_channels=3, classes=1000){
    def input Z(0:255)^{img_channels, img_height, img_width} image
    def output Q(0:1)^{classes} predictions

    def conv(filter, channels, stride=1, act=true){
        Convolution(kernel=(filter,filter), channels=channels, stride=(stride,stride)) ->
        BatchNorm() ->
        Relu(?=act)
    }
    def skip(channels, stride){
        Convolution(channels=96, stride=(stride,stride)) ->
        BatchNorm()
    }
    def resLayer(channels, stride=1){
        (
            conv(filter=3, channels=channels, stride=stride) ->
            conv(filter=3, channels=channels, stride=stride, act=false)
        |
            skip(channels=channels, stride=stride, ?=(stride!=1))
        ) ->
        Add() ->
        Relu()
    }

    image ->
    conv(filter=7, stride=2) ->
    Pooling(pool_type="max") ->
    resLayer(channels=64, ->=3) ->
    resLayer(channels=128, stride=2) ->
    GlobalPooling(pool_type="avg") ->
    FullyConnected(units=classes) ->
    Softmax() ->
    predictions
}