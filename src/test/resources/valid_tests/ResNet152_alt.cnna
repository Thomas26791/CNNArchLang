architecture ResNet152_alt(img_height=224, img_width=224, img_channels=3, classes=1000){
    def input Z(0:255)^{img_channels, img_height, img_width} data
    def output Q(0:1)^{classes} predictions

    def resLayer(channels, stride=1, addSkipConv=false){
        (
            Convolution(kernel=(1,1), channels=channels, stride=(stride,stride)) ->
            BatchNorm() ->
            Relu() ->
            Convolution(kernel=(3,3), channels=channels) ->
            BatchNorm() ->
            Relu() ->
            Convolution(kernel=(1,1), channels=4*channels) ->
            BatchNorm()
        |
            Convolution(kernel=(1,1), channels=4*channels, stride=(stride,stride), ? = addSkipConv) ->
            BatchNorm(? = addSkipConv)
        ) ->
        Add() ->
        Relu()
    }

    data ->
    Convolution(kernel=(7,7), channels=64, stride=(2,2)) ->
    BatchNorm() ->
    Relu() ->
    Pooling(pool_type="max", kernel=(3,3), stride=(2,2)) ->
    resLayer(channels=64, addSkipConv=true) ->
    resLayer(channels=64, ->=2) ->
    resLayer(channels=128, stride=2, addSkipConv=true) ->
    resLayer(channels=128, ->=7) ->
    resLayer(channels=256, stride=2, addSkipConv=true) ->
    resLayer(channels=256, ->=35) ->
    resLayer(channels=512, stride=2, addSkipConv=true) ->
    resLayer(channels=512, ->=2) ->
    GlobalPooling(pool_type="avg") ->
    FullyConnected(units=classes) ->
    Softmax() ->
    predictions
}